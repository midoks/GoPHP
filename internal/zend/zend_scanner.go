// Code generated by golex. DO NOT EDIT.

package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"
)

//TOKEN
const (
	T_EXIT      = iota
	T_OPEN_TAG  = iota
	T_CLOSE_TAG = iota
	T_ECHO      = iota
	T_END       = iota
)

var (
	src     = bufio.NewReader(os.Stdin)
	buf     []byte
	current byte
)

func getc() byte {
	if current != 0 {
		buf = append(buf, current)
	}
	current = 0
	if b, err := src.ReadByte(); err == nil {
		current = b
	}
	return current
}

func main() {
	input := "<?php echo '123'; exit; ?>\n"
	src = strings.NewReader(input)
	lex_scan()
}

//    %yyc is a "macro" to access the "current" character.
//
//    %yyn is a "macro" to move to the "next" character.
//
//    %yyb is a "macro" to return the beginning-of-line status (a bool typed value).
//        It is used for patterns like `^re`.
//        Example: %yyb prev == 0 || prev == '\n'
//
//    %yyt is a "macro" to return the top/current start condition (an int typed value).
//        It is used when there are patterns with conditions like `<cond>re`.
//        Example: %yyt startCond

func lex_scan() { // This left brace is closed by *1
	c := getc() // init

yystate0:

	buf = buf[:0] // Code before the first rule is executed before every scan cycle (state 0 action)

	goto yystart1

yystate1:
	c = getc()
yystart1:
	switch {
	default:
		goto yystate3 // c >= '\x01' && c <= '\b' || c == '\v' || c == '\f' || c >= '\x0e' && c <= '\x1f' || c >= '!' && c <= '-' || c == '/' || c >= ':' && c <= '@' || c >= '[' && c <= '^' || c == '`' || c >= '{' && c <= '\u007f'
	case c == '.':
		goto yystate6
	case c == '\n':
		goto yystate5
	case c == '\t' || c == '\r' || c == ' ':
		goto yystate4
	case c == '\x00':
		goto yystate2
	case c >= '0' && c <= '9':
		goto yystate8
	case c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c >= '\u0080' && c <= 'ÿ':
		goto yystate10
	}

yystate2:
	c = getc()
	goto yyrule5

yystate3:
	c = getc()
	goto yyrule6

yystate4:
	c = getc()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate5
	}

yystate5:
	c = getc()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate5
	}

yystate6:
	c = getc()
	switch {
	default:
		goto yyrule6
	case c >= '0' && c <= '9':
		goto yystate7
	}

yystate7:
	c = getc()
	switch {
	default:
		goto yyrule4
	case c >= '0' && c <= '9':
		goto yystate7
	}

yystate8:
	c = getc()
	switch {
	default:
		goto yyrule2
	case c == '.':
		goto yystate7
	case c >= '0' && c <= '9':
		goto yystate9
	}

yystate9:
	c = getc()
	switch {
	default:
		goto yyrule2
	case c == '.':
		goto yystate7
	case c >= '0' && c <= '9':
		goto yystate9
	}

yystate10:
	c = getc()
	switch {
	default:
		goto yyrule3
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c >= '\u0080' && c <= 'ÿ':
		goto yystate11
	}

yystate11:
	c = getc()
	switch {
	default:
		goto yyrule3
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c >= '\u0080' && c <= 'ÿ':
		goto yystate11
	}

yyrule1: // [ \t\n\r]+
	{
		// Ignore whitespace
		goto yystate0
	}
yyrule2: // {D}
	{
		fmt.Printf("int %q\n", buf)
		goto yystate0
	}
yyrule3: // {LABEL}
	{
		fmt.Printf("LABEL %q\n", buf)
		goto yystate0
	}
yyrule4: // {D}\.{D}?|\.{D}
	{
		fmt.Printf("float %q\n", buf)
		goto yystate0
	}
yyrule5: // \0
	{
		return // Exit on EOF or any other error
	}
yyrule6: // .
	if true { // avoid go vet determining the below panic will not be reached
		fmt.Printf("%q\n", buf) // Printout any other unrecognized stuff
		goto yystate0
	}
	panic("unreachable")

yyabort: // no lexem recognized
	//
	// silence unused label errors for build and satisfy go vet reachability analysis
	//
	{
		if false {
			goto yyabort
		}
		if false {
			goto yystate0
		}
		if false {
			goto yystate1
		}
	}

	// The rendered scanner enters top of the user code section when
	// lexem recognition fails. In this example it should never happen.
	log.Fatal("scanner internal error")

} // *1 this right brace
